// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
// versions:
// 	gofr-cli v0.7.0
// 	gofr.dev v1.39.0
// 	source: security.proto

package grpc

import (
	"context"

	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/container"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	healthpb "google.golang.org/grpc/health/grpc_health_v1"

	"github.com/stratifyr/security-service/internal/services"
)

// NewSecurityServiceGoFrServer creates a new instance of SecurityServiceGoFrServer
func NewSecurityServiceGoFrServer(svc services.SecurityService) *SecurityServiceGoFrServer {
	return &SecurityServiceGoFrServer{
		svc: svc,
		health: getOrCreateHealthServer(), // Initialize the health server
	}
}

// SecurityServiceServerWithGofr is the interface for the server implementation
type SecurityServiceServerWithGofr interface {
	Index(*gofr.Context) (any, error)
}

// SecurityServiceServerWrapper wraps the server and handles request and response logic
type SecurityServiceServerWrapper struct {
	SecurityServiceServer
	*healthServer
	Container *container.Container
	server    SecurityServiceServerWithGofr
}




// Unary method handler for Index
func (h *SecurityServiceServerWrapper) Index(ctx context.Context, req *SecurityIndexRequest) (*SecurityIndexResponse, error) {
	gctx := h.getGofrContext(ctx, &SecurityIndexRequestWrapper{ctx: ctx, SecurityIndexRequest: req})
	
	res, err := h.server.Index(gctx)
	if err != nil {
		return nil, err
	}

	resp, ok := res.(*SecurityIndexResponse)
	if !ok {
		return nil, status.Errorf(codes.Unknown, "unexpected response type %T", res)
	}
	
	return resp, nil
}

// mustEmbedUnimplementedSecurityServiceServer ensures implementation
func (h *SecurityServiceServerWrapper) mustEmbedUnimplementedSecurityServiceServer() {}

// RegisterSecurityServiceServerWithGofr registers the server
func RegisterSecurityServiceServerWithGofr(app *gofr.App, srv SecurityServiceServerWithGofr) {
	registerServerWithGofr(app, srv, func(s grpc.ServiceRegistrar, srv any) {
		wrapper := &SecurityServiceServerWrapper{
			server: srv.(SecurityServiceServerWithGofr),
			healthServer: getOrCreateHealthServer(),
		}

		RegisterSecurityServiceServer(s, wrapper)

		wrapper.Server.SetServingStatus("Hello", healthpb.HealthCheckResponse_SERVING)
	})
}

// getGofrContext creates GoFr context
func (h *SecurityServiceServerWrapper) getGofrContext(ctx context.Context, req gofr.Request) *gofr.Context {
	return &gofr.Context{
		Context:   ctx,
		Container: h.Container,
		Request:   req,
	}
}
